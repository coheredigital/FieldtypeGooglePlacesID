<?php

namespace ProcessWire;

use SKAgarwal\GoogleApi\PlacesApi;



class InputfieldGooglePlacesID extends InputfieldText implements Module
{

    public static function getModuleInfo()
    {
        return array(
            'title'     => __('Inputfield GooglePlacesID', __FILE__),
            'summary'   => __('Allows easy finding and entry of Google Places ID', __FILE__),
            'version'   => '0.1.0',
            'icon' => 'map',
            'requires' => 'ProcessWire>=3.0.0, PHP>=7..0',
            'author'    => 'Cohere Digital',
        );
    }

    public function init()
    {

        $this->attr('type', 'hidden');
        $this->attr('size', 120);
        // $this->attr('maxlength', 255);
        $this->attr('placeholder', 'AbCDEfgHIJkL01mN2OpQrs-00T3');
        $this->attr('pattern', '');
        parent::init();
    }


    public function ___renderValue()
    {
        return htmlspecialchars($this->value, ENT_QUOTES, "UTF-8");
    }


    public function renderReady(Inputfield $parent = null, $renderValueMode = false)
    {

        $this->config->scripts->add($this->config->urls->InputfieldGooglePlacesID . 'InputfieldGooglePlacesID.js');
        $this->config->styles->add($this->config->urls->InputfieldGooglePlacesID . 'InputfieldGooglePlacesID.css');
        $r = parent::renderReady($parent, $renderValueMode);
        return $r;
    }


    public function ___render()
    {

        $query = $this->query;
        $hash = \md5($query);
        $matches = $this->cache->getFor('InputfieldGooglePlacesID', "query:{$hash}", 3600 * 24 * 14, function () use ($query) {

            if (!$query) {
                return [];
            }

            try {
                $key = $this->config->googlePlacesApiKey ?: $this->get('googlePlacesApiKey');
                $googlePlacesApi = new PlacesApi(config()->googlePlacesApiKey);
                $response = $googlePlacesApi->placeAutocomplete($query, [
                    'location' => $this->location,
                    'radius' => $this->radius,
                ]);
            } catch (\Throwable $th) {
                return false;
            }

            return $response;
        });
        $matches = \json_decode($matches);


        $out = files()->render("{$this->config->paths->InputfieldGooglePlacesID}markup/field.php", [
            'value' => $this->value,
            'query' => $query,
            'field_id' => $this->id,
            'attributes' => $this->getAttributesString(),
            'items' => $matches->predictions,
        ]);

        return $out;
    }


    public function getAttributes()
    {
        $attrs = parent::getAttributes();
        $attr['type'] = 'hidden';
        return $attrs;
    }


    public function setAttribute($key, $value)
    {
        if ($key == 'value') {
            $value = $this->sanitizeValue($value);
        }
        return parent::setAttribute($key, $value);
    }


    protected function sanitizeValue($value)
    {
        $value = trim($value);
        return $value;
    }



    public function ___processInput(WireInputData $input)
    {
        parent::___processInput($input);
        $value = (string) $this->attr('value');
        return $this;
    }


    public function ___getConfigInputfields()
    {
        $inputfields = parent::___getConfigInputfields();

        // placeholder

        return $inputfields;
    }
}
